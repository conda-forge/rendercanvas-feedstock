{% set version = "2.0.1" %}

package:
  name: rendercanvas
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/r/rendercanvas/rendercanvas-{{ version }}.tar.gz
  sha256: d8a4cfe928bf7dd1a64f568d9a84e414b52f6eef5a3b97101d002a3ac173c049

build:
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  host:
    - python {{ python_min }}
    - flit-core >=3.2,<4
    - pip
  run:
    - python >={{ python_min }}
    - sniffio

test:
  imports:
    - rendercanvas
  commands:
    - pip check
  requires:
    - pip
    - python {{ python_min }}

about:
  summary: One canvas API, multiple backends
  license: BSD-2-Clause
  license_file: LICENSE
  home: https://github.com/pygfx/rendercanvas/
  description: |
    See how the two windows above look the same? That's the idea; they also
    look the same to the code that renders to them. Yet, the GUI systems are
    very different (Qt vs glfw in this case). Now that's a powerful
    abstraction!

    * Provide a generic canvas API to render to.
    * Provide an event loop for scheduling events and draws.
    * Provide a simple but powerful event system with standardized event objects.
    * Provide various canvas implementations:
        * One that is light and easily installed (glfw).
        * For various GUI libraries (e.g. qt and wx), so visuzalizations can be embedded in a GUI.
        * For specific platforms (e.g. Jupyter, browser).

    The main use-case is rendering with wgpu, but rendercanvascan be used by
    anything that can render based on a window-id or by producing bitmap
    images.

extra:
  recipe-maintainers:
    - hmaarrfk
